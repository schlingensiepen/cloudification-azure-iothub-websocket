@{
    ViewBag.Title = "Home Page";
}

@section Styles {
    table {
    border: 0
    }

    .commslog-data {
    font-family: Consolas, Courier New, Courier, monospace;
    }

    .commslog-server {
    background-color: #990000;
    color: white
    }

    .commslog-client {
    background-color: #005500;
    color: white
    }
}

<div class="jumbotron">
    <h1>Sample Web Socket</h1>
    <p class="lead">Sample for using Websocket.</p>
    <p><a href="api.schlingensiepen.com" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-12">
        <p id="stateLabel">Ready to connect...</p>
    </div>
</div>

<div class="row">
    <div class="col-md-1">1</div>
    <div class="col-md-1">2</div>
    <div class="col-md-1">3</div>
    <div class="col-md-1">4</div>
    <div class="col-md-1">5</div>
    <div class="col-md-1">6</div>
    <div class="col-md-1">7</div>
    <div class="col-md-1">8</div>
    <div class="col-md-1">9</div>
    <div class="col-md-1">10</div>
    <div class="col-md-1">11</div>
    <div class="col-md-1">12</div>
</div>


<div class="row">
    <label class="col-md-3 control-label" for="connectionUrl">WebSocket Server URL:</label>
    <div class="col-md-5"><input id="connectionUrl" class="form-control"/></div>
    <button class="btn col-md-4" id="connectButton" type="submit">Connect</button>
</div>
<div class="row">
    <label class="col-md-3 control-label" for="sendMessage">Message to send:</label>
    <div class="col-md-5"><input id="sendMessage" class="form-control" disabled /></div>
    <button class="btn col-md-2" id="sendButton" type="submit" disabled>Send</button>
    <button class="btn col-md-2" id="closeButton" disabled>Close Socket</button>
</div>


<div class="row">
    <div class="col-md-12">
        <h2>Communication Log</h2>
        <table class="col-md-12">
            <thead>
            <tr>
                <td class="col-md-3">From</td>
                <td class="col-md-3">To</td>
                <td class="col-md-6">Data</td>
            </tr>
            </thead>
            <tbody id="commsLog"></tbody>            
        </table>
    </div>
</div>

<script>
    var connectionForm = document.getElementById("connectionForm");
    var connectionUrl = document.getElementById("connectionUrl");
    var connectButton = document.getElementById("connectButton");
    var stateLabel = document.getElementById("stateLabel");
    var sendMessage = document.getElementById("sendMessage");
    var sendButton = document.getElementById("sendButton");
    var sendForm = document.getElementById("sendForm");
    var commsLog = document.getElementById("commsLog");
    var socket;
    var scheme = document.location.protocol == "https:" ? "wss" : "ws";
    var port = document.location.port ? (":" + document.location.port) : "";
    var postfix = "/ws.ashx";
    var url = scheme + "://" + document.location.hostname + port + postfix;
    connectionUrl.value = url;
    function updateState() {
        function disable() {
            sendMessage.disabled = true;
            sendButton.disabled = true;
            closeButton.disabled = true;
        }
        function enable() {
            sendMessage.disabled = false;
            sendButton.disabled = false;
            closeButton.disabled = false;
        }
        connectionUrl.disabled = true;
        connectButton.disabled = true;
        if (!socket) {
            disable();
        } else {
            switch (socket.readyState) {
            case WebSocket.CLOSED:
                stateLabel.innerHTML = "Closed";
                disable();
                connectionUrl.disabled = false;
                connectButton.disabled = false;
                break;
            case WebSocket.CLOSING:
                stateLabel.innerHTML = "Closing...";
                disable();
                break;
            case WebSocket.CONNECTING:
                stateLabel.innerHTML = "Connecting...";
                disable();
                break;
            case WebSocket.OPEN:
                stateLabel.innerHTML = "Open";
                enable();
                break;
            default:
                stateLabel.innerHTML = "Unknown WebSocket State: " + htmlEscape(socket.readyState);
                disable();
                break;
            }
        }
    }
    closeButton.onclick = function () {
        if (!socket || socket.readyState != WebSocket.OPEN) {
            alert("socket not connected");
        }
        socket.close(1000, "Closing from client");
    }
    sendButton.onclick = function () {
        if (!socket || socket.readyState != WebSocket.OPEN) {
            alert("socket not connected");
        }
        var data = sendMessage.value;
        socket.send(data);
        commsLog.innerHTML += '<tr>' +
            '<td class="commslog-client">Client</td>' +
            '<td class="commslog-server">Server</td>' +
            '<td class="commslog-data">' + htmlEscape(data) + '</td>'
        '</tr>';
    }
    connectButton.onclick = function() {
        stateLabel.innerHTML = "Connecting";
        socket = new WebSocket(connectionUrl.value);
        socket.onopen = function (event) {
            updateState();
            commsLog.innerHTML += '<tr>' +
                '<td colspan="3" class="commslog-data">Connection opened</td>' +
                '</tr>';
        };
        socket.onclose = function (event) {
            updateState();
            commsLog.innerHTML += '<tr>' +
                '<td colspan="3" class="commslog-data">Connection closed. Code: ' + htmlEscape(event.code) + '. Reason: ' + htmlEscape(event.reason) + '</td>' +
                '</tr>';
        };
        socket.onerror = updateState;
        socket.onmessage = function (event) {
            commsLog.innerHTML += '<tr>' +
                '<td class="commslog-server">Server</td>' +
                '<td class="commslog-client">Client</td>' +
                '<td class="commslog-data">' + htmlEscape(event.data) + '</td>'
            '</tr>';
        };
    };
    function htmlEscape(str) {
        return str
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
</script>



